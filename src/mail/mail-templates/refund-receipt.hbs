async sendRefundReceipt(mailData: MailData<{
  userName: string;
  transactionId: string;
  amount: number;
  purchaseDate: string;
  productItems: Array<{
    productName: string;
    quantity: number;
    price: number;
    date?: string;
    time?: string;
  }>;
  stripeReceiptUrl?: string;
}>): Promise<void> {
  const i18n = I18nContext.current();
  const refundReceiptTitle = await i18n?.translate('common.refundReceipt') || 'Refund Receipt';
  const text1 = await i18n?.translate('refund-receipt.text1') || 'Your refund has been processed.';
  const text2 = await i18n?.translate('refund-receipt.text2') || 'We have fully refunded your purchase.';
  const text3 = await i18n?.translate('refund-receipt.text3') || 'Thank you for your understanding.';

  await this.mailerService.sendMail({
    to: mailData.to,
    subject: `${refundReceiptTitle} #${mailData.data.transactionId.slice(-6)}`,
    text: `${refundReceiptTitle} for Transaction #${mailData.data.transactionId.slice(-6)}`,
    templatePath: path.join(
      this.configService.getOrThrow('app.workingDirectory', { infer: true }),
      'src',
      'mail',
      'mail-templates',
      'refund-receipt.hbs',
    ),
    context: {
      title: refundReceiptTitle,
      userName: mailData.data.userName,
      transactionId: mailData.data.transactionId,
      formattedTransactionId: mailData.data.transactionId.slice(-6),
      amount: (mailData.data.amount / 100).toFixed(2),
      purchaseDate: mailData.data.purchaseDate,
      productItems: mailData.data.productItems.map(item => ({
        ...item,
        formattedPrice: (item.price).toFixed(2),
        formattedTotal: (item.price * item.quantity).toFixed(2)
      })),
      appName: this.configService.get('app.name', { infer: true }),
      stripeReceiptUrl: mailData.data.stripeReceiptUrl,
      ixplorDashUrl: "https://ixplor.app/dashboard/",
      text1,
      text2,
      text3,
      currentYear: new Date().getFullYear()
    },
  });
}